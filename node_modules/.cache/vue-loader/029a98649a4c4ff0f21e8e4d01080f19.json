{"remainingRequest":"/home/runner/work/U1_Microeconomia/U1_Microeconomia/node_modules/vue-loader/lib/index.js??vue-loader-options!/home/runner/work/U1_Microeconomia/U1_Microeconomia/src/views/curso/Tema2.vue?vue&type=template&id=17df3fc8&lang=pug&","dependencies":[{"path":"/home/runner/work/U1_Microeconomia/U1_Microeconomia/src/views/curso/Tema2.vue","mtime":1736308446391},{"path":"/home/runner/work/U1_Microeconomia/U1_Microeconomia/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/runner/work/U1_Microeconomia/U1_Microeconomia/node_modules/vue-loader/lib/loaders/templateLoader.js","mtime":499162500000},{"path":"/home/runner/work/U1_Microeconomia/U1_Microeconomia/node_modules/pug-plain-loader/index.js","mtime":499162500000},{"path":"/home/runner/work/U1_Microeconomia/U1_Microeconomia/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/runner/work/U1_Microeconomia/U1_Microeconomia/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"},null]}